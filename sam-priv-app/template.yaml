AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  sam-priv-app
  
  Sample SAM Template for sam-priv-app

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 5

Parameters:      
  StackPrefix:
    Description: Stack Resource Name Prefix
    Type: String
    Default: Demo  
  EnvironmentType:
    Description: The environment type
    Type: String
    AllowedValues: ["Dev", "Staging", "Production"]
    Default: Dev
Mappings:
  # VPC/Subnet Cidr Block for Environment Type
  # If you need more IP addresses then you can customize these ranges
  CidrConfig:
    Dev:
      VPC: 10.0.0.0/16
      PublicOne: 10.0.0.0/24
      PublicTwo: 10.0.1.0/24
      PrivateOne: 10.0.2.0/24
      PrivateTwo: 10.0.3.0/24
    Staging:
      VPC: 10.1.0.0/16
      PublicOne: 10.1.0.0/24
      PublicTwo: 10.1.1.0/24
      PrivateOne: 10.1.2.0/24
      PrivateTwo: 10.1.3.0/24
    Production:
      VPC: 10.2.0.0/16
      PublicOne: 10.2.0.0/24
      PublicTwo: 10.2.1.0/24
      PrivateOne: 10.2.2.0/24
      PrivateTwo: 10.2.3.0/24
             
Resources:
  HelloWorldFunction:
    Type: AWS::Serverless::Function    
    Properties:
      CodeUri: hello-world/
      Handler: hello-world
      Runtime: go1.x
      Tracing: Active
      Policies:
        - AWSLambdaBasicExecutionRole
        # VPC内Lambdaで必要
        # - AWSLambdaVPCAccessExecutionRole
      FunctionName: hello-world-function        
      Events:
        CatchAll:
          Type: Api
          Properties:
            Path: /hello
            Method: GET
            RestApiId: !Ref HelloApi
      Environment: 
        Variables:
          PARAM1: VALUE

# API Gatway Private APIサンプル参考情報
# https://sun-blog.site/%E3%80%90aws%E3%80%91sam%E3%81%A7private-api%EF%BC%88api-gateway-lambda%EF%BC%89/#template.yaml
# https://betterprogramming.pub/private-serverless-rest-api-with-lambda-using-sam-2eb31864b243
# https://zenn.dev/kazu777/articles/2275dd27c3c9cd

# Security Group for VPC Endpoint  
  PrivateAPISecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId:
        Fn::ImportValue: !Sub ${StackPrefix}-VPC-ID
      GroupDescription: Access to the API Gateway Private API
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: !FindInMap [CidrConfig, !Ref EnvironmentType, VPC]
      Tags:
        - Key: Name
          Value: !Sub ${StackPrefix}-PrivateAPI-SG

# VPC Endpoint for API Gateway
  PrivateAPIVPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:      
      VpcEndpointType: Interface
      ServiceName: !Sub com.amazonaws.${AWS::Region}.execute-api
      SubnetIds:
        - Fn::ImportValue: !Sub ${StackPrefix}-PrivateSubnetOneId
        - Fn::ImportValue: !Sub ${StackPrefix}-PrivateSubnetTwoId
      VpcId: 
        Fn::ImportValue: !Sub ${StackPrefix}-VPC-ID          
      SecurityGroupIds: 
        - !GetAtt PrivateAPISecurityGroup.GroupId
      PrivateDnsEnabled: true

# API Gateway Private REST API
  HelloApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod      
      EndpointConfiguration:
        Type: PRIVATE
        VPCEndpointIds:
          - !Ref PrivateAPIVPCEndpoint      
      DefinitionBody:
        Fn::Transform:
          Name: AWS::Include
          Parameters:
            Location: ./openapi.yaml
      #TracingEnabled: true

Outputs:
  HelloWorldAPI:
    Description: "API Gateway endpoint URL for Prod environment for First Function"
    Value: !Sub "https://${HelloApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/hello/"
  HelloWorldFunction:
    Description: "First Lambda Function ARN"
    Value: !GetAtt HelloWorldFunction.Arn
  HelloWorldFunctionIamRole:
    Description: "Implicit IAM Role created for Hello World function"
    Value: !GetAtt HelloWorldFunctionRole.Arn
